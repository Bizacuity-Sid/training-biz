1.	1-1. Prepare a list of offices sorted by country, state, city.

SELECT *
FROM offices
ORDER BY country,
         state,
         city;






2.	2-7 List the products in each product line

SELECT productLine,
       productName
FROM Products
ORDER BY productLine;





3.	3-1. Report the account representative for each customer.

SELECT c.customerName,
       concat(e.firstName,e.lastName) AS accountRep
FROM customers c
  JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber;
	

4.	4-1. List products sold by order date.

SELECT o.orderDate,
       p.productName
FROM orders o
  JOIN orderdetails od ON o.orderNumber = od.orderNumber
  JOIN products p ON od.productCode = p.productCode
ORDER BY o.orderDate;



	

5.	1-4. List the product lines that contain 'Cars'.

SELECT productLine
FROM productLines
WHERE productLine LIKE '%Cars%';




6.	2-6. Report those payments greater than $100,000.
	SELECT *
FROM payments
WHERE amount > 100000;


	

7.	3-14. What are the names of executives with VP or Manager in their title? Use the CONCAT function to combine the employee's first name and last name into a single field for reporting.
	
SELECT concat(firstName,lastName) AS fullname,
       jobTitle
FROM employees
WHERE jobTitle LIKE '%VP%'
OR    jobTitle LIKE '%Manager%'
ORDER BY jobTitle;



8.	4-13. Report the name and city of customers who don't have sales representatives?
	
SELECT customerName,
       city
FROM customers
WHERE salesRepEmployeeNumber IS NULL;




9.	5-4. Report the products that have not been sold.

SELECT p.productName
FROM products p
  LEFT JOIN orderdetails od ON od.productCode = p.productCode
WHERE od.productCode IS NULL;




10.	6-7. Who are the employees in Boston?

SELECT concat(e.firstName,e.lastName) AS fullname
FROM employees e
  JOIN offices o ON o.officeCode = e.officeCode
WHERE o.city = 'Boston';



11.	7-8. Report those payments greater than $100,000. Sort the report so the customer who made the highest payment appears first.
SELECT c.customerName,
       p.amount
FROM customers c
  JOIN payments p ON p.customerNumber = c.customerNumber
WHERE p.amount > 100000
ORDER BY p.amount DESC;



12.	8-2. List the order dates in descending order for orders for the 1940 Ford Pickup Truck.

SELECT o.orderDate,
       p.productName
FROM orders o
  JOIN orderdetails od ON od.orderNumber = o.orderNumber
  JOIN products p ON p.productCode = od.productCode
WHERE p.productName = '1940 Ford Pickup Truck'
ORDER BY o.orderDate DESC;




13.	9-5. List the names of products sold at less than 80% of the MSRP.

SELECT p.productName
FROM orderdetails od
  JOIN products p ON od.productCode = p.productCode
WHERE od.priceEach < p.MSRP*0.8;






14.	10-6. Reports those products that have been sold with a markup of 100% or more (i.e., the priceEach is at least twice the buyPrice) 7. List the products ordered on a Monday.


SELECT DISTINCT p.productName
FROM orderdetails od
  JOIN products p ON p.productCode = od.productCode
WHERE od.priceEach >= 2*p.buyPrice;




15.	11-1. Find products containing the name 'Ford'.

SELECT productName
FROM products
WHERE productName LIKE '%Ford%';




16.	12-2. List products ending in 'ship'.

SELECT productName
FROM products
WHERE productName LIKE '%Ship';



17.	13-4. What are the products with a product code in the range S700_1000 to S700_1499?

SELECT productName
FROM products
WHERE productCode BETWEEN 'S700_1000' AND 'S700_1499';


18.	14-5. Which customers have a digit in their name?
SELECT customerNumber,
       customerName
FROM customers
WHERE REGEXP_LIKE (customerName,'\d');

	

19.	15-6. List the names of employees called Dianne or Diane.
SELECT concat(firstName,lastName) AS fullName
FROM employees
WHERE firstName LIKE '%Dianne%'
OR    lastName LIKE '%Diane%'
OR    firstName LIKE '%Diane%'
OR    lastName LIKE '%Dianne%';


20.	16-7. List the products containing ship or boat in their product name.
SELECT productName
FROM products
WHERE productName LIKE '%Ship%'
OR    productName LIKE '%Boat%';

	

21.	17-8. List the products with a product code beginning with S700.
SELECT productName,
       productCode
FROM products
WHERE productCode LIKE 'S700%';



22.	18-9. List the names of employees called Larry or Barry.

SELECT concat(firstName,lastName) AS fullname
FROM employees
WHERE firstName LIKE '%Larry%'
OR    firstName LIKE '%Barry%'
OR    lastName LIKE '%Larry%'
OR    lastName LIKE '%Barry%';



23.	19-10. List the names of employees with non-alphabetic characters in their names.
SELECT concat(firstName,lastName) AS fullname
FROM employees
WHERE REGEXP_LIKE (firstName,'[^a-zA-Z]')
OR    REGEXP_LIKE (lastName,'[^a-zA-Z]')



24.	20-11. List the vendors whose name ends in Diecast

SELECT productVendor
FROM products
WHERE productVendor LIKE '%Diecast';





25.	21-1. Who is at the top of the organization (i.e., reports to no one).
SELECT *
FROM employees
WHERE reportsTo IS NULL;





26.	22-2. Who reports to William Patterson?
SELECT concat(e1.firstName,e1.lastName) AS fullname
FROM employees e1
  JOIN employees e2 ON e1.reportsTo = e2.employeeNumber
WHERE e2.firstName = 'William'
AND   e2.lastName = 'Patterson';




27.	23-3. List all the products purchased by Herkku Gifts.
SELECT c.customerName,
       p.productName
FROM customers c
  JOIN orders o ON o.customerNumber = c.customerNumber
  JOIN orderdetails od ON od.orderNumber = o.orderNumber
  JOIN products p ON p.productCode = od.productCode
WHERE c.customerName = 'Herkku Gifts';





28.	24-9. List the employees who report to those employees who report to Diane Murphy. Use the CONCAT function to combine the employee's first name and last name into a single field for reporting.
SELECT concat(e1.firstName,e1.lastName) AS fullname
FROM employees e1
  JOIN employees e2 ON e2.employeeNumber = e1.reportsTo
  JOIN employees e3 ON e3.employeeNumber = e2.reportsTo
WHERE e3.firstName = 'Diane'
AND   e3.lastName = 'Murphy';


29.	25-27. Find the products sold in May 2003 but not in May 2004.
	WITH may2003 AS
(
  SELECT p.productName,
         p.productCode
  FROM products p
    JOIN orderdetails od ON od.productCode = p.productCode
    JOIN orders o ON o.orderNumber = od.orderNumber
  WHERE EXTRACT(YEAR FROM o.orderDate) = 2003
  AND   EXTRACT(MONTH FROM o.orderDate) = 5
),
may2004 AS
(
  SELECT p1.productName,
         p1.productCode
  FROM products p1
    JOIN orderdetails od1 ON od1.productCode = p1.productCode
    JOIN orders o1 ON o1.orderNumber = od1.orderNumber
  WHERE EXTRACT(YEAR FROM o1.orderDate) = 2004
  AND   EXTRACT(MONTH FROM o1.orderDate) = 5
)
SELECT p1.productCode,
       p1.productName
FROM may2003 p1
  LEFT JOIN may2004 p2 ON p1.productCode = p2.productCode
WHERE p2.productCode IS NULL;



	
30.	26-28. Find the customers without payments in 2003.
SELECT c.customerName,
       p.amount
FROM customers c
  LEFT JOIN payments p
         ON p.customerNumber = c.customerNumber
        AND EXTRACT (year FROM p.paymentDate) = 2003
WHERE p.customerNumber IS NULL;




31.	27-1.Who reports to Mary Patterson?
	
SELECT concat(e1.firstName,e1.lastName) AS fullname
FROM employees e1
  JOIN employees e2 ON e1.reportsTo = e2.employeeNumber
WHERE e2.firstName = 'Mary'
AND   e2.lastName = 'Patterson';



32.	1-2. How many employees are there in the company?
	SELECT COUNT(employeeNumber) AS no_of_employee
FROM employees;



33.	2-3. What is the total of payments received?
SELECT SUM(amount)
FROM payments;


34.	3-5. Report total payments for October 28, 2004.
SELECT SUM(amount) AS total
FROM payments
WHERE EXTRACT(YEAR FROM paymentDate) = 2004
AND   EXTRACT(MONTH FROM paymentDate) = 10
AND   EXTRACT(DAY FROM paymentDate) = 28;


35.	4-8. How many products in each product line?
SELECT productline,
       COUNT(productCode) AS total
FROM products
GROUP BY productline
ORDER BY productline;





36.	5-9. What is the minimum payment received?
SELECT MIN(amount) AS minimum
FROM payments;


37.	6-11. What is the average percentage markup of the MSRP on buyPrice?
SELECT AVG((MSRP - buyPrice) / buyPrice*100) AS markup
FROM products;



38.	7-12. How many distinct products does ClassicModels sell?
SELECT COUNT(productCode) AS no_of_products
FROM products;




39.	8-2. Report total payments for Atelier graphique.
SELECT SUM(p.amount) AS totalpay
FROM payments p
  JOIN customers c ON c.customerNumber = p.customerNumber
WHERE c.customerName = 'Atelier graphique';



40.	9-6. How many orders have been placed by Herkku Gifts?
SELECT COUNT(o.orderNumber) AS total
FROM orders o
  JOIN customers c ON c.customerNumber = o.customerNumber
WHERE c.customerName = 'Herkku Gifts';


41.	10-9. List the value of 'On Hold' orders.
SELECT SUM(od.quantityOrdered*od.priceEach) AS on_hold_value
FROM orderdetails od
  JOIN orders o ON o.orderNumber = od.orderNumber
WHERE o.status = 'On Hold';




42.	11-8. What is the quantity on hand for products listed on 'On Hold' orders?
SELECT p.quantityInStock,
       od.quantityOrdered,
       o.status
FROM products p
  JOIN orderdetails od ON od.productCode = p.productCode
  JOIN orders o ON o.orderNumber = od.orderNumber
WHERE o.status = 'On Hold';




43.	12-3. Report the number of customers in Denmark, Norway, and Sweden.
SELECT country,
       COUNT(customerNumber) AS no_of_customers
FROM customers
WHERE country = 'Denmark'
OR    country = 'Norway'
OR    country = 'Sweden'
GROUP BY country;




44.	13-5. What is the difference in days between the most recent and oldest order date in the Orders file?
SELECT MAX(orderDate) -MIN(orderDate) AS diff
FROM orders;



45.	14-7. What is the value of orders shipped in August 2004?
SELECT SUM(od.quantityOrdered*od.priceEach) AS value_shipped
FROM orderdetails od
  JOIN orders o ON o.orderNumber = od.orderNumber
WHERE EXTRACT(year FROM o.orderDate) = 2004
AND   EXTRACT(month FROM o.orderDate) = 8
AND   o.status = 'Shipped';


46.	1-15. Which orders have a value greater than $5,000?
SELECT orderNumber,
       SUM(quantityOrdered*priceEach) AS amt
FROM orderdetails
HAVING SUM(quantityOrdered*priceEach) > 5000
GROUP BY orderNumber
ORDER BY amt DESC;




47.	2-3. Report the total payments by date.
SELECT paymentDate,
       SUM(amount) AS total
FROM payments
GROUP BY paymentDate
ORDER BY paymentDate;


48.	3-5. List the amount paid by each customer.
SELECT c.customerNumber,
       SUM(p.amount) AS paid
FROM customers c
  LEFT JOIN payments p ON p.customerNumber = c.customerNumber
GROUP BY c.customerNumber
ORDER BY customerNumber;



49.	4-10. Report the number of orders 'On Hold' for each customer.
SELECT c.customerName,
       COUNT(o.status) AS on_hold
FROM customers c
  JOIN orders o ON o.customerNumber = c.customerNumber
WHERE o.status = 'On Hold'
GROUP BY customerName
ORDER BY customerName;




50.	5-3. List the names of customers and their corresponding order number where a particular order from that customer has a value greater than $25,000?
SELECT c.customerName,
       o.orderNumber,
       SUM(od.quantityOrdered*od.priceEach) AS amt
FROM customers c
  JOIN orders o ON o.customerNumber = c.customerNumber
  JOIN orderdetails od ON od.orderNumber = o.orderNumber
GROUP BY o.orderNumber,
         c.customerName
HAVING SUM(od.quantityOrdered*od.priceEach) > 25000
ORDER BY amt DESC;



51.	6-4. Compute the commission for each sales representative, assuming the commission is 5% of the value of an order. Sort by employee last name and first name.
SELECT e.employeeNumber,
       e.firstName,
       e.lastName,
       SUM(od.quantityOrdered*od.priceEach)*0.05 AS commission
FROM Employees e
  JOIN Customers c ON e.employeeNumber = c.salesRepEmployeeNumber
  JOIN Orders o ON c.customerNumber = o.customerNumber
  JOIN OrderDetails od ON o.orderNumber = od.orderNumber
GROUP BY e.employeeNumber,
         e.firstName,
         e.lastName
ORDER BY e.lastName,
         e.firstName;


52.	7-6. Compute the average time between order date and ship date for each customer ordered by the largest difference.
SELECT c.customerNumber,
       c.customerName,
       AVG(o.shippedDate - o.orderDate) AS avgdaysToShip
FROM Customers c
  JOIN Orders o ON c.customerNumber = o.customerNumber
WHERE o.shippedDate IS NOT NULL
GROUP BY c.customerNumber,
         c.customerName
ORDER BY avgdaysToShip DESC;

53.	8-21. Compute the revenue generated by each sales representative based on the orders from the customers they serve.
SELECT e.employeeNumber,
       e.firstName,
       e.lastName,
       SUM(od.quantityOrdered*od.priceEach) AS totalRevenue
FROM Employees e
  JOIN Customers c ON e.employeeNumber = c.salesRepEmployeeNumber
  JOIN Orders o ON c.customerNumber = o.customerNumber
  JOIN OrderDetails od ON o.orderNumber = od.orderNumber
GROUP BY e.employeeNumber,
         e.firstName,
         e.lastName
ORDER BY totalRevenue;


54.	9-22. Compute the profit generated by each sales representative based on the orders from the customers they serve. Sort by profit generated descending.
SELECT e.employeeNumber,
       e.firstName,
       e.lastName,
       SUM((od.priceEach - p.buyPrice)*od.quantityOrdered) AS totalProfit
FROM Employees e
  JOIN Customers c ON e.employeeNumber = c.salesRepEmployeeNumber
  JOIN Orders o ON c.customerNumber = o.customerNumber
  JOIN OrderDetails od ON o.orderNumber = od.orderNumber
  JOIN Products p ON od.productCode = p.productCode
GROUP BY e.employeeNumber,
         e.firstName,
         e.lastName
ORDER BY totalProfit DESC;


55.	10-23. Compute the revenue generated by each product, sorted by product name.
SELECT p.productCode,
       p.productName,
       SUM(od.quantityOrdered*od.priceEach) AS revenue
FROM products p
  JOIN orderdetails od ON od.productCode = p.productCode
GROUP BY p.productCode,
         p.productName
ORDER BY p.productCode;


56.	11-24. Compute the profit generated by each product line, sorted by profit descending. Productline
SELECT p.productLine,
       SUM((od.priceEach - p.buyPrice)*od.quantityOrdered) AS profit
FROM products p
  JOIN orderdetails od ON od.productCode = p.productCode
GROUP BY p.productLine
ORDER BY profit DESC;


57.	1-8. Compute the total value ordered, total amount paid, and their difference for each customer for orders placed in May 2004 and payments received in May 2004 (Hint; Create views for the total paid and total ordered).
WITH value_ordered AS
(
  SELECT o.customerNumber,
         SUM(od.quantityOrdered*od.priceEach) AS orderedval
  FROM orders o
    JOIN orderdetails od ON od.orderNumber = o.orderNumber
  WHERE EXTRACT(YEAR FROM o.orderDate) = 2004
  AND   EXTRACT(MONTH FROM o.orderDate) = 5
  GROUP BY o.customerNumber
),
paid AS
(
  SELECT p.customerNumber,
         SUM(p.amount) AS totalpaid
  FROM payments p
  WHERE EXTRACT(YEAR FROM p.paymentDate) = 2004
  AND   EXTRACT(MONTH FROM p.paymentDate) = 5
  GROUP BY p.customerNumber
)
SELECT c.customerNumber,
       c.customerName,
       COALESCE(o.orderedval,0) AS orderedval,
       COALESCE(p.totalpaid,0) AS totalpaid,
       COALESCE(o.orderedval,0) -COALESCE(p.totalpaid,0) AS diff
       FROM Customers c
  LEFT JOIN value_ordered o ON c.customerNumber = o.customerNumber
  LEFT JOIN paid p ON c.customerNumber = p.customerNumber
ORDER BY diff DESC;

58.	2-14. What is the ratio of the value of payments made to orders received for each month of 2004. 
(i.e., divide the value of payments made by the orders received)?* 
WITH value_ordered AS
(
  SELECT EXTRACT(MONTH FROM o.orderDate) AS MONTH,
         SUM(od.quantityOrdered*od.priceEach) AS orderedval
  FROM orders o
    JOIN orderdetails od ON od.orderNumber = o.orderNumber
  WHERE EXTRACT(YEAR FROM o.orderDate) = 2004
  GROUP BY EXTRACT(MONTH FROM o.orderDate)
  ORDER BY MONTH
),
paid AS
(
  SELECT EXTRACT(MONTH FROM p.paymentDate) AS MONTH,
         SUM(p.amount) AS totalpaid
  FROM payments p
  WHERE EXTRACT(YEAR FROM p.paymentDate) = 2004
  GROUP BY EXTRACT(MONTH FROM p.paymentDate)
  ORDER BY MONTH
)
SELECT ct1.month,
       (ct2.totalpaid / ct1.orderedval) AS ratio
FROM paid ct2
  JOIN value_ordered ct1 ON ct1.month = ct2.month;

59.	3-15. What is the difference in the amount received for each month of 2004 compared to 2003?
WITH paid2004 AS
(
  SELECT EXTRACT(MONTH FROM p.paymentDate) AS MONTH,
         SUM(p.amount) AS totalpaid
  FROM payments p
  WHERE EXTRACT(YEAR FROM p.paymentDate) = 2004
  GROUP BY EXTRACT(MONTH FROM p.paymentDate)
  ORDER BY MONTH
),
paid2003 AS
(
  SELECT EXTRACT(MONTH FROM p.paymentDate) AS MONTH,
         SUM(p.amount) AS totalpaid
  FROM payments p
  WHERE EXTRACT(YEAR FROM p.paymentDate) = 2003
  GROUP BY EXTRACT(MONTH FROM p.paymentDate)
  ORDER BY MONTH
)
SELECT ct1.month,
       (ct1.totalpaid - ct2.totalpaid) AS diff
FROM paid2004 ct1
  JOIN paid2003 ct2 ON ct1.month = ct2.month;

60.	4-25. Compute the ratio for each product of sales for 2003 versus 2004.
WITH product2003 AS
(
  SELECT od.productCode,
         SUM(od.quantityOrdered*od.priceEach) AS saled2003
  FROM orderdetails od
    JOIN orders o ON od.orderNumber = o.orderNumber
  WHERE EXTRACT(YEAR FROM o.orderDate) = 2003
  GROUP BY od.productCode
),
product2004 AS
(
  SELECT od.productCode,
         SUM(od.quantityOrdered*od.priceEach) AS saled2004
  FROM orderdetails od
    JOIN orders o ON od.orderNumber = o.orderNumber
  WHERE EXTRACT(YEAR FROM o.orderDate) = 2004
  GROUP BY od.productCode
)
SELECT p.productCode,
       COALESCE(c1.saled2003,0) AS saled2003,
       COALESCE(c2.saled2004,0) AS saled2004,
       CASE
         WHEN c2.saled2004 IS NULL OR c2.saled2004 = 0 THEN COALESCE(c1.saled2003 / c2.saled2004,0)
         ELSE c1.saled2003 / c2.saled2004
       END AS ratio
FROM products p
  LEFT JOIN product2003 c1 ON p.productCode = c1.productCode
  LEFT JOIN product2004 c2 ON c1.productCode = c2.productCode
ORDER BY ratio DESC;

61.	5-26. Compute the ratio of payments for each customer for 2003 versus 2004.
WITH pay2003 AS
(
  SELECT customerNumber,
         SUM(amount) AS pay
  FROM payments
  WHERE EXTRACT(YEAR FROM paymentDate) = 2003
  GROUP BY customerNumber
),
pay2004 AS
(
  SELECT customerNumber,
         SUM(amount) AS pay
  FROM payments
  WHERE EXTRACT(YEAR FROM paymentDate) = 2004
  GROUP BY customerNumber
)
SELECT c.customerNumber,
       COALESCE(c1.pay,0) AS pay03,
       COALESCE(c2.pay,0) AS pay04,
       CASE
         WHEN c2.pay IS NULL OR c2.pay = 0 THEN COALESCE(c1.pay / c2.pay,0)
         ELSE COALESCE(c1.pay / c2.pay,0)
       END AS ratio
FROM customers c
  LEFT JOIN pay2003 c1 ON c.customerNumber = c1.customerNumber
  LEFT JOIN pay2004 c2 ON c.customerNumber = c2.customerNumber
ORDER BY ratio DESC;

62.	1-10. List all payments greater than twice the average payment.
WITH avg_amt AS
(
  SELECT AVG(amount) AS avg_pay FROM payments
)
SELECT p.customerNumber,
       p.amount
FROM payments p
  CROSS JOIN avg_amt c1
WHERE p.amount > 2*c1.avg_pay
order by p.amount;


63.	2-10. What is the percentage value of each product in inventory sorted by the highest percentage first
WITH inventoryVal AS
(
  SELECT productCode,
         productName,
         quantityInStock*buyPrice AS inventory_value
  FROM Products
),
totalValue AS
(
  SELECT SUM(inventory_value) AS total_inventory_value
  FROM inventoryVal
)
SELECT c1.productCode,
       c1.productName,
       c1.inventory_value,
       (c1.inventory_value / c2.total_inventory_value)*100 AS percentage
FROM inventoryVal c1,
     totalValue c2
ORDER BY percentage DESC;


64.	3-19. Compute the revenue generated by each customer based on their orders. Also, show each customer's revenue as a percentage of total revenue. Sort by customer name.
WITH each_revenue
AS
(SELECT o.customerNumber,
       SUM(od.quantityOrdered*od.priceEach) AS revenue
FROM orderdetails od
  JOIN orders o ON od.orderNumber = o.orderNumber
GROUP BY o.customerNumber),
         total_revenue AS (SELECT SUM(revenue) AS total FROM each_revenue)
SELECT c.customerNumber,
       c.customerName,
       COALESCE(c1.revenue,0) AS revenue,
       COALESCE((c1.revenue / c2.total)*100,0) AS percentage
FROM total_revenue c2,
     customers c
  LEFT JOIN each_revenue c1 ON c.customerNumber = c1.customerNumber
ORDER BY c.customerName;

65.	4-20. Compute the profit generated by each customer based on their orders. Also, show each customer's profit as a percentage of total profit. Sort by profit descending.


WITH each_profit
AS
(SELECT o.customerNumber,
       SUM((od.priceEach - p.buyPrice)*od.quantityOrdered) AS profit
FROM products p
  JOIN orderdetails od ON p.productCode = od.productCode
  JOIN orders o ON od.orderNumber = o.orderNumber
GROUP BY o.customerNumber),
         total_profit AS (SELECT SUM(profit) AS total FROM each_profit)
SELECT c.customerNumber,
       c.customerName,
       COALESCE(c1.profit,0) AS profit,
       COALESCE((c1.profit / c2.total)*100,0) AS percentage
FROM total_profit c2,
     customers c
  LEFT JOIN each_profit c1 ON c.customerNumber = c1.customerNumber
ORDER BY percentage DESC;



66.	5-2. Which payments in any month and year are more than twice the average for that month and year (i.e. compare all payments in Oct 2004 with the average payment for Oct 2004)? Order the results by the date of the payment. You will need to use the date functions.


WITH avg_pay
AS
(SELECT EXTRACT(year FROM paymentDate) AS year,
       EXTRACT(month FROM paymentDate) AS month,
       AVG(amount) AS average
FROM payments
GROUP BY EXTRACT(year FROM paymentDate),
         EXTRACT(month FROM paymentDate)
ORDER BY year,
         month) SELECT p.checkNumber,
         p.paymentDate,
         p.amount FROM payments p 
         JOIN avg_pay p1 ON p1.year = EXTRACT(year FROM p.paymentDate) AND p1.month = EXTRACT(month FROM p.paymentDate) 
         WHERE p.amount > 2*p1.average 
         ORDER BY p.paymentDate;



67.	6-3. Report for each product, the percentage value of its stock on hand as a percentage of the stock on hand for product line to which it belongs. Order the report by product line and percentage value within product line descending. Show percentages with two decimal places.


WITH instock
AS
(SELECT productLine,
       SUM(quantityInStock) AS totalstock
FROM products
GROUP BY productLine)
SELECT p.productName,
       p.productLine,
       (p.quantityInStock / p1.totalstock)*100 AS percentage
FROM products p
  JOIN instock p1 ON p.productLine = p1.productLine
ORDER BY p.productLine,
         percentage DESC;



68.	7-4. For orders containing more than two products, report those products that constitute more than 50% of the value of the order.


WITH products_ordered
AS
(SELECT orderNumber,
       SUM(quantityOrdered*priceEach) AS total
FROM orderdetails
GROUP BY orderNumber
HAVING COUNT(productCode) > 2) 
SELECT od.orderNumber,
       od.productCode,
       (quantityOrdered*priceEach) AS product_value,
       c1.total,
       ((quantityOrdered*priceEach) / c1.total)*100 AS percentage
FROM orderdetails od
  JOIN products_ordered c1 ON od.orderNumber = c1.orderNumber
WHERE (quantityOrdered*priceEach) > c1.total*0.5;





